{"version":3,"sources":["components/ContentIFrame.jsx","components/IVEditForm.jsx","components/IVLabel.jsx","components/LabelTypeSelector.jsx","components/LabelEditor.jsx","App.js","registerServiceWorker.js","index.js"],"names":["ContentIFrame","forwardRef","props","ref","iframeRef","useRef","useState","iframe","setIframe","useEffect","render","children","contentDocument","getElementById","title","src","onLoad","current","style","width","height","IVEditForm","fieldName","EditableField","record","onChange","editLabel","value","evt","target","IVLabel","subtitle","labelType","className","border","colSpan","printLabel","rowSpan","fullName","hideValue","hideLabel","unitRoom","mrn","weight","fin","dueDateTime","multiProduct","components","map","component","n","drug","labelSuffix","concentration","volume","baseSolution","route","dose","continuous","frequency","totalVolume","infuseOver","rate","compoundDateTime","expirationDateTime","notes","preparedBy","checkedBy","IVField","fullLabel","join","LabelTypeSelector","labelTypes","iv","console","log","LabelEditor","Object","defineProperties","firstName","lastName","editlabel","get","this","state","updateState","float","margin","onClick","contentWindow","print","App","exact","path","Component","displayName","name","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","ReactDOM","basename","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.66c30f06.chunk.js","sourcesContent":["import React, { forwardRef, useEffect, useRef, useState } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nexport const ContentIFrame = forwardRef((props, ref) => {\r\n    const iframeRef = ref || useRef();\r\n    const [ iframe, setIframe ] = useState();\r\n\r\n    const frameLoaded = () => {\r\n        setIframe(iframeRef.current);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(!iframe) return;\r\n        render(props.children, iframe.contentDocument.getElementById('root'));\r\n    }, [ iframe, props.children ]);\r\n\r\n    return <iframe ref={iframeRef} title={props.title} src=\"./#/FrameContent\" onLoad={frameLoaded} style={{\r\n        width: '3.5in',\r\n        height: '7in'\r\n    }}></iframe>;\r\n});","import React from 'react';\r\n\r\nexport const IVEditForm = (props) => (\r\n    <>\r\n        <EditableField {...props} fieldName=\"firstName\" />\r\n        <EditableField {...props} fieldName=\"lastName\" />\r\n        <EditableField {...props} fieldName=\"drug\" />\r\n    </>\r\n);\r\n\r\nconst EditableField = ({ record, fieldName, onChange }) => {\r\n    const { editLabel, value } = record[fieldName];\r\n    \r\n    const onInputChange = (evt) => {\r\n        onChange({\r\n            fieldName,\r\n            value: evt.target.value\r\n        });\r\n    }\r\n\r\n    return <div>\r\n        <div>{editLabel}</div>\r\n        <input value={value} onChange={onInputChange}></input>\r\n    </div>\r\n};\r\n\r\nconst EditableCollection = ({ record, fieldName, subFields }) => {\r\n    const items = record[fieldName];\r\n\r\n    return items.map(item => subFields.map(subField => <EditableField record={item} fieldName={subField} />));\r\n};","import React from 'react';\r\n\r\nexport const IVLabel = ({ title, subtitle, record, labelType }) => {\r\n    return labelType ? <div className=\"label\"><table border=\"0\"><tbody>\r\n        <tr className='heading title'><td colSpan=\"2\">{title}</td></tr>\r\n        <tr className='heading subtitle'><td colSpan=\"2\">** {subtitle} {labelType.printLabel || labelType.editLabel}**</td></tr>\r\n        <tr>\r\n            <td rowSpan=\"2\">\r\n                <IVField {...record.fullName} hideValue/>\r\n                <br/>\r\n                <IVField {...record.fullName} hideLabel/>\r\n            </td>\r\n            <td><IVField {...record.unitRoom} /></td>\r\n        </tr>\r\n        <tr>\r\n            <td><IVField {...record.mrn} /></td>\r\n        </tr>\r\n        <tr>\r\n            <td><IVField {...record.weight}/></td>\r\n            <td><IVField {...record.fin}/></td>\r\n        </tr>\r\n        <tr>\r\n            <td colSpan=\"2\"><IVField {...record.dueDateTime}/></td>\r\n        </tr>\r\n        { \r\n            labelType.multiProduct ?\r\n            <>\r\n                <tr className='heading'>\r\n                    <td colSpan=\"2\">Components</td>\r\n                </tr>\r\n                { record.components.map((component, n) => \r\n                    <>\r\n                        <tr className='section-start'>\r\n                            <td><IVField {...component.drug} labelSuffix={` ${n+1}`}/></td>\r\n                            <td><IVField {...component.concentration}/></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"2\"><IVField {...component.volume} /></td>\r\n                        </tr>\r\n                    </>\r\n                )}\r\n            </> :\r\n            <tr className='section-start'>\r\n                <td><IVField {...record.drug}/></td>\r\n                <td><IVField {...record.concentration}/></td>\r\n            </tr>\r\n        }\r\n        <tr className='separated'>\r\n            <td colSpan=\"2\"><IVField {...record.baseSolution}/></td>\r\n        </tr>\r\n        <tr className='section-start'>\r\n            <td><IVField {...record.route}/></td>\r\n            <td><IVField {...record.dose}/></td>\r\n        </tr>\r\n        <tr>\r\n            <td>{labelType.continuous ? null : <IVField {...record.frequency}/>}</td>\r\n            <td><IVField {...record.totalVolume}/></td>\r\n        </tr>\r\n        <tr>\r\n            <td>{labelType.continuous ? null : <IVField {...record.infuseOver}/>}</td>\r\n            <td><IVField {...record.rate}/></td>\r\n        </tr>\r\n        <tr className='separated'>\r\n            <td><IVField {...record.compoundDateTime} hideValue /></td>\r\n            <td><IVField {...record.compoundDateTime} hideLabel /></td>\r\n        </tr>\r\n        <tr className='separated'>\r\n            <td><IVField {...record.expirationDateTime} hideValue /></td>\r\n            <td><IVField {...record.expirationDateTime} hideLabel /></td>\r\n        </tr>\r\n        <tr className=\"separated\">\r\n            <td colSpan=\"2\"><IVField {...record.notes}/><br/> <br/><br/></td>\r\n        </tr>\r\n        <tr>\r\n            <td><IVField {...record.preparedBy}/></td>\r\n            <td><IVField {...record.checkedBy}/></td>\r\n        </tr>\r\n        <tr className='heading'>\r\n            <td colSpan=\"2\">** Return to Phramacy after 24 Hours **</td>\r\n        </tr>\r\n    </tbody></table></div> : null;\r\n};\r\n\r\nconst IVField = ({ hideLabel, hideValue, labelSuffix, ...props}) => {\r\n    const label = props.printLabel || props.editLabel;\r\n    const fullLabel = [ label, labelSuffix ].join('');\r\n\r\n    return <>\r\n        { hideLabel ? null : <strong>{fullLabel}:</strong>}\r\n        { hideLabel || hideValue ? null : '  '}\r\n        { hideValue ? null : props.value}\r\n    </>;\r\n};","import React, { useEffect } from 'react';\r\n\r\nexport const LabelTypeSelector = ({ onChange }) => {\r\n\r\n    const labelTypes = [\r\n        { editLabel: 'Intermittent IV', continuous: false, multiProduct: false, iv: true },\r\n        { editLabel: 'Continuous IV', continuous: true, multiProduct: false, iv: true },\r\n        { editLabel: 'Multi-Product Intermittent IV', printLabel: 'Multi-Prod Int IV', continuous: false, multiProduct: true, iv: true },\r\n        { editLabel: 'Multi-Product Continuous IV', printLabel: 'Multi-Prod Cont IV', continuous: true, multiProduct: true, iv: true },\r\n        //{ editLabel: 'External Syringe', printLabel: 'Syringe - External', continuous: false, multiProduct: true, iv: false }\r\n    ];\r\n\r\n    const onSelectChange = (evt) => {\r\n        console.log('onSelectChange', labelTypes[evt.target.value]);\r\n        if(onChange) onChange(labelTypes[evt.target.value]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(onChange) onChange(labelTypes[0]);\r\n    }, []);\r\n\r\n    return <>\r\n        <div>Label Type:</div>\r\n        <select onChange={onSelectChange}>\r\n            { labelTypes.map((labelType, n) => \r\n                <option value={n}>{labelType.editLabel}</option>\r\n            )}\r\n        </select>\r\n    </>\r\n};","import React, { useRef, useState } from 'react';\r\nimport { ContentIFrame } from './ContentIFrame';\r\nimport { IVEditForm } from './IVEditForm';\r\nimport { IVLabel } from './IVLabel';\r\nimport { LabelTypeSelector } from './LabelTypeSelector';\r\n\r\nexport const LabelEditor = () => {\r\n    const iframeRef = useRef();\r\n    const [ state, updateState ] = useState({ record: Object.defineProperties({\r\n        firstName: { editLabel: 'First Name', value: 'Nicholas' },\r\n        lastName: { editLabel: 'Last Name', value: 'Goodman' },\r\n        weight: { editLabel: 'Weight (kg)', value: '78' },\r\n        dueDateTime: { editLabel: 'Due Date / Time', printLabel: 'Due D/T', value: '01/16/2021 17:10'},\r\n        unitRoom: { editLabel: 'Unit / Room', printLabel: 'Unit-Rm', value: '40 Bed B'},\r\n        mrn: { editLabel: 'MRN', value: '421759871291-9443'},\r\n        fin: { editLabel: 'FIN' },\r\n        drug: { editLabel: 'Drug' },\r\n        components: [\r\n            { \r\n                drug: { editLabel: 'Drug' },\r\n                concentration: { editLabel: 'Concentration', printLabel: 'Conc' },\r\n                volume: { editLabel: 'Volume' }\r\n            },\r\n            { \r\n                drug: { editLabel: 'Drug' },\r\n                concentration: { editLabel: 'Concentration', printLabel: 'Conc' },\r\n                volume: { editLabel: 'Volume' }\r\n            },\r\n            { \r\n                drug: { editLabel: 'Drug' },\r\n                concentration: { editLabel: 'Concentration', printLabel: 'Conc' },\r\n                volume: { editLabel: 'Volume' }\r\n            },\r\n            { \r\n                drug: { editLabel: 'Drug' },\r\n                concentration: { editLabel: 'Concentration', printLabel: 'Conc' },\r\n                volume: { editLabel: 'Volume' }\r\n            }\r\n        ],\r\n        concentration: { editLabel: 'Concentration', printLabel: 'Conc' },\r\n        baseSolution: { editLabel: 'Base Solution', value: 'Sodium Chloride 0.9% 100 ML'},\r\n        route: { editLabel: 'Route', value: 'IVPB' },\r\n        frequency: { editLabel: 'Frequency', printLabel: 'Freq' },\r\n        infuseOver: { editLabel: 'Infuse Over', value: '60 mins' },\r\n        dose: { editLabel: 'Dose' },\r\n        totalVolume: { editlabel: 'Total Volume', printLabel: 'Tot Vol' },        \r\n        rate: { editLabel: 'Rate', value: 'UD mL/hr' },\r\n        compoundDateTime: { editLabel: 'Compound Date / Time', printLabel: 'Compound\\nDate/Time', value: '01/16/2021 20:10' },\r\n        expirationDateTime: { editLabel: 'Expiration Date / Time', printLabel: 'Expiration\\nDate/Time', value: '01/16/2021 20:10' },\r\n        notes: { editLabel: 'Notes' },\r\n        preparedBy: { editLabel: 'Prepared By', printLabel: 'Prep' },\r\n        checkedBy: { editLabel: 'Checked By', printLabel: 'Check' }\r\n\r\n    },{\r\n        fullName: {\r\n            get() {\r\n                return {\r\n                    printLabel: 'Name',\r\n                    value: `${this.lastName.value}, ${this.firstName.value}`\r\n                }\r\n            }\r\n        }\r\n    })});\r\n\r\n    const { record, labelType } = state;\r\n\r\n    const print = () => {\r\n        iframeRef.current.contentWindow.print();\r\n    }\r\n\r\n    const onLabelTypeChange = (labelType) => {\r\n        updateState(current => ({ ...current, labelType }));\r\n    };\r\n\r\n    const onRecordChange = ({ fieldName, value }) => {\r\n        updateState(current => {\r\n            current.record[fieldName].value = value;\r\n            return { ...current };\r\n        });\r\n    };\r\n\r\n    return <div>\r\n        <h1>Label Editor</h1>\r\n        <div style={{ float: 'left', margin: 12 }}>\r\n            <LabelTypeSelector onChange={onLabelTypeChange} />\r\n            <br/><br/>\r\n            <IVEditForm record={record} onChange={onRecordChange} />\r\n            <button onClick={print}>Save and Print</button>\r\n        </div>\r\n        <div style={{ float: 'left'}}>\r\n        <ContentIFrame title=\"labelContent\" ref={iframeRef}>\r\n            <IVLabel \r\n                title=\"Children's National Hospital\"\r\n                subtitle={`Downtime Label: `}\r\n                record = {record}\r\n                labelType = {labelType}\r\n            />\r\n        </ContentIFrame>\r\n        </div>\r\n    </div>;\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { LabelEditor } from './components/LabelEditor';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        <Route exact path='/' component={LabelEditor} />\r\n        <Route exact path='/FramedContent' component={null} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <HashRouter basename={baseUrl}>\r\n    <App />\r\n  </HashRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}